---
title: "It's Dangerous to go Alone! Take This"
subtitle: ""
date: "2024-04-18"
author: "Lisa Anders, Posit Solutions Engineer"
title-slide-attributes: 
  data-background-color: white
  data-background-image: _extensions/positslides/assets/backgrounds/title-slide-option-1.png
  data-background-size: contain
format:
  positslides-revealjs: 
    width: "1600"
    height: "900"
    filters:
      - positslides
---

## Intro {.smaller}

<center>

![](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/data_cowboy.png){width="50%"}

</center>

::: {layout="[2, 10]"}
![](img/lisa-profile-2.png)

**Lisa Anders** - Posit Solutions Engineer and self-professed R nerd learning to love Python. Engineer turned data scientist turned Posit admin and excited to share lessons learned the hard way to make things easier for others. Also awkward at writing intros in the third person!
:::

::: {.citation style="font-size: 16px"}
"Illustration from Hadley Wickham's talk"The Joy of Functional Programming (for Data Science)." by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)
:::

## It's Dangerous to go Alone! Take This {.smaller}

Imagine a world where code doesn't disappear and is backed up in version control, environments are explicit and easily reproduced, and secrets are responsibly managed. 

<center>

:::: {.columns}

::: {.column width="33%"}

**Version control your code**

![](img/kerin-gedge-JDzoTGfoogA-unsplash.jpg)

:::

::: {.column width="33%"}

**Reproduceable environments** 

![](img/karina-vorozheeva-rW-I87aPY5Y-unsplash.jpg)

:::

::: {.column width="33%"}

**Keep secrets secret**

![](img/richard-brutyo-Sg3XwuEpybU-unsplash.jpg)

:::

::::

</center>

::: {.notes}
Important tools that take the pain out of data science
:::

## Version control your code

<center>

![](https://happygitwithr.com/img/watch-me-diff-watch-me-rebase-smaller.png){width="70%"}

::: {.citation style="font-size: 16px"}
"Illustration from [Jenny Bryan and Happy Git with R](https://happygitwithr.com/)
:::

</center>

## Version control: What is this thing called "git"? {.smaller}

Who here has heard of git? Is anyone already using version control? 


## Version control: What is this thing called "git"? {.smaller}

::: {layout="[2, 10]"}
![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/265px-Tux.svg.png)

Git was developed by the one and only Linus Torvalds (of linux fame), initially released in 2005 (19 years ago!) 
:::

Git itself is an open source utility, but most commonly it is used through a managed service (which are all pretty much the same under the hood). Here is a more complete list of version control software options: 

- Azure
- Bitbucket
- Github
- Gitlab
- Subversion (SVN)
- Jenkins

> Today's focus will be on github

<center>

::: {.citation style="font-size: 16px"}
"Linux penguin from [Wikipedia](https://en.wikipedia.org/wiki/Tux_(mascot))
:::

</center>

## Version control: But really, what is it anyway? {.smaller}

Think of a process with some document ("mythesis"): 

- Make a copy ("mythesis001") and make your changes 
- Compare your copy to the original document ("Updated with better abstract!")
- Ask someone to review the differences ("LGTM!" - your advisor)
- Pull in those changes

Horrible to self-manage, right? But having a software to do this for you is marvelous! 

What git doesn't do is "file locking". But there are some new features added that now make this possible: 

- Gitlab: <https://software.rcc.uchicago.edu/git/help/user/project/file_lock.md> 
- Github: <https://github.blog/2017-03-02-git-lfs-2-0-0-released/> 

> DEMO (google drive)

## Version control: Credentials (PAT) {.smaller}

First, you'll need to set up your credentials. You can do this either with a PAT or an SSH key. 

PAT: 

```r
usethis::create_github_token()
```

Copy the generated PAT to your clipboard. Provide this PAT next time a Git operation asks for your password OR store the PAT explicitly.

```r
gitcreds::gitcreds_set()
```

For example, you can store a PAT for a GitHub Enterprise deployment like so:

```r
gitcreds::gitcreds_set("https://github.acme.com")
```

Add your email if needed:

```r
git config --global user.email "lisa.anders@posit.co"
```

Check that it stored with:

```r
gitcreds_get()
```

## Version control: Credentials (SSH) {.smaller}

From terminal:

-   Generate a new key with: `ssh-keygen -t ed25519 -C "your_email@example.com"`
-   Add your ssh key to the background client: `eval "$(ssh-agent -s)"` `ssh-add ~/.ssh/id_ed25519`
-   Or find an existing key with: `ls -al ~/.ssh`
-   Copy the key to your clipboard: `clip < ~/.ssh/id_ed25519.pub`

Follow [here](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account) to add it to your github account.

Follow [here](https://stackoverflow.com/questions/112396/how-do-i-remove-the-passphrase-for-the-ssh-key-without-having-to-create-a-new-ke) to remove / add a password. 

You may also need to configure some global options:

```         
git config --global user.name ""
git config --global user.email ""
```

You can check that SSH keys exist and the name with:

```         
ls ~/.ssh
ssh-keygen -p
```


## Version control: Credentials (SSH) {.smaller}

From RStudio:

-   Go to Tools -\> Global Options -\> Git / SVN
-   Create SSH Key
-   Approve the key and add a password (if appropriate)
-   View Public Key
-   Copy that public key that was provided into the SSH and GPG keys section in your git under your profile settings.

You'll copy / update code using the `SSH` method from git.

Can also be done directly in the terminal



## Version control: Oh no things have gone off the rails! {.smaller}

Troubleshooting from R:  

```r
library(usethis)
library(gitcreds)
library(gh)
library(credentials)

usethis::gh_token_help()
usethis::git_sitrep()
gh::gh_whoami()

# Remove any pre-existing credentials:
gitcreds::gitcreds_delete()

```

Troubleshooting from command line:

``` bash
# Check the git configuration:
git config --list 

# Check if an existing repository was cloned with ssh or https:
git remote show origin

# You can check that SSH keys exist and the name with:
ls ~/.ssh
ssh-keygen -p
```

## Version control: Oh no things have gone off the rails! {.smaller}

Troubleshooting git when working in cloud environments: 

On a cloud instance check that is is writing to somewhere persistent, IE into /home/ and not into /opt/. Find where your library is:

```
.libPaths()
```

Change where git credentials are stored: 

``` bash
git config --global credential.helper 'store --file ~/.my-credentials'
```

## Version control: so what are branches? {.smaller}

<center>

![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/efae32ce-863f-4773-852c-4335e3ce4709.png?h=e88ba01376eab634c8e4250263e57f3e){width="65%"}


::: {.citation style="font-size: 16px"}
"Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)
:::

</center>

## Version control workflow 

Teams standardize onto a branching philosophy: 

- Centralized workflow: Teams use only a single repository and commit directly to the main branch.

- Feature branching: Teams use a new branch for each feature and don't commit directly to the main branch.

- GitFlow: An extreme version of feature branching in which development occurs on the develop branch, moves to a release branch, and merges into the main branch.

- Personal branching: Similar to feature branching, but rather than develop on a branch per feature, it's per developer. Every user merges to the main branch when they complete their work.

> DEMO (personal repo, project repo)

::: {.citation style="font-size: 16px"}
"Branching strategies from [Gitlab](https://about.gitlab.com/topics/version-control/version-control-best-practices/)
:::


## Version control best practices

- When in doubt, work in a branch 
- Write meaningful commit messages and commits ("Made ABC do 123")
- Make small changes and merge often
- Feedback from reviews is invaluable

As a reviewer: 

- Clearly distinguish between required changes, suggested changes, and just good ol' recommendations or thoughts. It's easy for reviews to come across as micro-managing, and this can help in distinguishing between what changes are needed vs what is just knowledge sharing. 

## Version control advanced topic: pipelines

> Demo 

<https://solutions.posit.co/operations/deploy-methods/ci-cd/>

## How I sleep knowing my code is safely backed up 

<center>

![](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwww.flourishaustralia.org.au%2Fsites%2Fdefault%2Ffiles%2Fstyles%2Fbody%2Fpublic%2F2020-09%2Fsleep.jpg%3Fitok%3DKlxmA0Iv&f=1&nofb=1&ipt=32ada2d09c839081fc6011219906f5a27204ebec32cb5a8b13524fa159a8d16d&ipo=images){width="65%"}


::: {.citation style="font-size: 16px"}
"Illustration by [Flourish Australia](https://www.flourishaustralia.org.au/sites/default/files/styles/body/public/2020-09/sleep.jpg?itok=KlxmA0Iv)
:::

</center>

## Questions? 

## Reproduceable environment management {.smaller}

Great data science work should be **reproducible** and **collaborative**. There are many ways to achieve this, but it's easy to fall into some bad strategies. 

<center>

![](https://solutions.rstudio.com/environments/reproduce/reproducibility-strategies-and-danger-zones.png)

::: {.citation style="font-size: 16px"}
Environments Strategy Maps <https://solutions.rstudio.com/environments/reproduce/>
:::

</center>

::: notes
Being able to repeat experiments is the foundation of all science. Reproducing work is also critical for business applications: scheduled reporting, team collaboration, project validation.

Environment Management Strategies: - Snapshot and Restore - The snapshot and restore strategy fits when package access is open and users are responsible for reproducibility. - Shared Baseline - The shared baseline strategy fits when administrators or R champions are responsible for creating an environment where less experienced users can easily share and re-run work. - Validated - The validated strategy is similar to the shared baseline strategy. The main difference is the validated strategy targets teams wishing to restrict access to a particular set of packages and teams wishing to approve or audit changes to the package environment.
:::

## Environment management example: Using renv, git, and Public Package Manager {.smaller}

**Step 1: Use pre-compiled packages**

-   Go to [Public Package Manager](https://packagemanager.rstudio.com/client/#/)

-   Click on **Get Started** -\> **Setup** -\> **Distribution** and select your OS -\> Select **Latest** or **Freeze** and follow the instructions below the calendar.

-   For example:

``` r
options(repos = c(REPO_NAME = "https://packagemanager.rstudio.com/all/latest"))
```

::: notes
Congratulations! You are now using hosted binary packages, no more struggling against c headers! to a particular set of packages and teams wishing to approve or audit changes to the package environment.

https://support.rstudio.com/hc/en-us/articles/360046703913-FAQ-for-RStudio-Public-Package-Manager

Package Manager supports users for accessing binaries of their packages. UI for searching through packages. Get information about it, crucially any system pre-requisites. If you need to grab an old version Package Manager hosts the old versions. Useful working with renv because if you need to restore a project that is older then likely it will need that older version. RStudio has a sync server where we take changes from CRAN and build the binaries. When you go to install a package we have binaries created. Fast, doesn't need to be compiled from source. Useful for large packages like arrow (anything with system dependencies) to install quickly since it won't need to build and prevent build failures.

We evaluate CRAN, Bioconductor, and PyPI each business day (Monday through Friday) and publish new snapshots when updates are available. Then, RStudio Public Package Manager syncs these snapshots daily. For example, suppose a CRAN package gets updated on Saturday. We will publish a new snapshot to the RStudio Package Service sometime on Monday, usually Monday afternoon. Then, the CRAN sync will pick up the change on Tuesday at 12:00 am. Occasionally, if there are very important updates, we generate an extra snapshot to make the updates available sooner. The timing of each snapshot varies based on the number of changes and the number of dependencies involved.
:::

## Environment management example: Using renv, git, and Public Package Manager {.smaller}

**Step 2: Use environment tracking**

``` r
# Set up a new version controlled R project and install renv:
install.packages("renv")
library(renv)

# Initialize your project with renv and take a snapshot:
renv::init()
renv::snapshot():

# Update all packages, or revert back to an earlier snapshot:
renv::update()
renv::revert()

# History is saved into version control:
renv::history()
```

<center>

::: {.citation style="font-size: 16px"}
renv <https://rstudio.github.io/renv>, Package Manager <https://rstudio.com/products/package-manager/> and Public Package Manager <https://packagemanager.rstudio.com/>
:::

</center>

## Environment management example: Using renv, git, and Public Package Manager {.smaller}

**Step 3: Easy collaboration**

``` r
# Have your colleague configure their repository to match yours: 
options(repos = c(REPO_NAME = "https://packagemanager.rstudio.com/all/latest")) 

## Send a colleague the link to your project on git, they'll restore your environment with:
renv::restore()
```

<center>

::: {.citation style="font-size: 16px"}
renv <https://rstudio.github.io/renv>, Package Manager <https://rstudio.com/products/package-manager/> and Public Package Manager <https://packagemanager.rstudio.com/>
:::

</center>

::: notes
Congratulations! You now have a project that has all dependencies explicitly tracked. You can come back to this project weeks, years later and will be able to create exactly the environment it needs in order to successfully run with one command, renv::restore().
:::

## Environment management example: Using venv, git, and Public Package Manager {.smaller}

**Follow the same steps, as with R**

**Step 1: Use pre-compiled packages**

```bash
# Configure pip to use packages from public package manager: 
pip config set global.index-url https://packagemanager.posit.co/pypi/latest/simple
pip config set global.trusted-host packagemanager.posit.co
```

**Step 2: Use environment tracking**

```bash
# Activate your virtual environment: 
python -m venv .venv
. .venv/bin/activate

# Take a snapshot of the environment: 
pip freeze > requirements.txt
```

**Step 3: Easy collaboration**

```bash
# Send a colleague the link to your project on git, they'll restore your environment with:
pip install -r requirements.txt
```

<center>

::: {.citation style="font-size: 16px"}
venv <https://docs.python.org/3/library/venv.html>, pip requirements.txt <https://pip.pypa.io/en/stable/reference/requirements-file-format/>, Package Manager <https://rstudio.com/products/package-manager/> and Public Package Manager <https://packagemanager.rstudio.com/>
:::

</center>

::: notes

:::

## Questions? 

## Keep secrets secret  {.smaller}

Prevent exposing secret keys, passwords, sensitive config parameters in your code directly. This keeps those pieces more secure and less likely to escape into the wild. 

What is a secret? 

How many times are secrets exposed? 

<center>

::: {.citation style="font-size: 16px"}
[environment variable's for securing sensitive variables](https://db.rstudio.com/best-practices/deployment/), [securing credentials](https://db.rstudio.com/best-practices/managing-credentials)
:::

</center>

## Secrets and RStudio  {.smaller}

`usethis` has a function for creating and editing the `.Renviron` file: 

```r
library(usethis)

# Edit the global .Renviron file
usethis::edit_r_environ()

# Edit the project specific .Renviron file
usethis::edit_r_environ(scope = "project")
```

Add the variables to that file in the format `variable_name = "variable_value"` and save it. Restart the session so the new environment variables will be loaded with `ctrl shift f10` or through the RStudio IDE with `session` -> `restart R`. 

Saved variables can be accessed with:

```r
variable_name <- Sys.getenv("variable_name")
```

## Secrets and Python  {.smaller}

Same as with R, environment variables can be referenced and used in your code:  

```python 
import os

# Setting a new environment variable
os.environ["API_KEY"] = "YOUR_API_KEY"

# Retrieving the environment variable
var = os.environ["variable_name"]
```

## Secrets and git  {.smaller}

The `.gitignore` file is powerful! Tell git to ignore certain files that exist locally. 

 - While typically explicitly listing the file name is the desired addition, wildcards can be added to exclude a type of file. For example: `*.html`. 
 
Here's an example `.gitignore`: 

```
# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
/*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md

# Shiny token, see https://shiny.rstudio.com/articles/shinyapps.html
rsconnect/

# Deployment details from rsconnect-python
rsconnect-python/

# Temporary files
.DS_Store
__pycache__
.ipynb_checkpoints

rmarkdown-notebook/flights.csv

.venv
venv
.env
.Rprofile

/.luarc.json

/.quarto/
```

## Secrets and Posit Connect{.smaller}

Starting with version 1.6, RStudio Connect allows [Environment Variables](https://docs.rstudio.com/connect/admin/security-and-auditing/#application-environment-variables). The variables are encrypted on-disk, and in-memory.

Adding a variable through the Posit Connect UI is easy peasy: 

![](img/env_var.png)

<center>

::: {.citation style="font-size: 16px"}
[Connect Content Environment Variables](https://docs.posit.co/connect/user/content-settings/#content-vars)
:::

</center>

## Imagine a world 

:::: {.columns}

::: {.column width="50%"}

![](img/arny-mogensen-rRgO49i8w2s-unsplash-2.png)

:::

::: {.column width="50%"}

![](img/thomas-rey-Oadvsf3xH9E-unsplash.jpg)

:::

::::

Imagine a world where code doesn't disappear and is backed up in version control, environments are explicit and easily reproduced, and secrets are responsibly managed. Wouldn't that be great?


## TLDR {.smaller}

**Cheat sheet for git (contributed)**: <https://rstudio.github.io/cheatsheets/contributed-cheatsheets.html>

**What They Forgot to Teach You About R** : <https://rstats.wtf/>

**Happy Git with R** : <https://happygitwithr.com/>

**Get started with renv in the RStudio IDE**: <https://docs.posit.co/ide/user/ide/guide/environments/r/renv.html>

**Environment variables on Connect**: <https://docs.posit.co/connect/user/content-settings/#content-vars> 

**Using Public Package Manager** : <https://support.rstudio.com/hc/en-us/articles/360046703913-FAQ-for-RStudio-Public-Package-Manager>

**Interested in our Enterprise Products? Click [here](https://www.rstudio.com/products/team/)**

## Questions? 

## Backup

## Default Slide 

This text size is `normal`. 

:::{.smaller}

This text size is `smaller`. 

Bullet points

1. Point 1
2. Point 2

:::

> Blocking comment

:::{.smaller}

:::: {.columns}

::: {.column width="33%"}
**Column 1**

- Link to [external resource](url)
:::

::: {.column width="50%"}
**Column 2**

- ![But what about an image?](image.jpg){#fig-image fig-align="center" width="750"}
:::

::::

:::

::: {.notes}
We can even add some notes 
:::





## Version control your code

<center>

![](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/data_cowboy.png){width="70%"}

::: {.citation style="font-size: 16px"}
"Illustration from Hadley Wickham's talk"The Joy of Functional Programming (for Data Science)." by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)
:::

</center>


